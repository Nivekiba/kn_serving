// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: nexus_backend.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NexusBackend_AddServer_FullMethodName         = "/proto.NexusBackend/AddServer"
	NexusBackend_RemoveServer_FullMethodName      = "/proto.NexusBackend/RemoveServer"
	NexusBackend_DrainServer_FullMethodName       = "/proto.NexusBackend/DrainServer"
	NexusBackend_GetServerMetadata_FullMethodName = "/proto.NexusBackend/GetServerMetadata"
	NexusBackend_ListServers_FullMethodName       = "/proto.NexusBackend/ListServers"
	NexusBackend_GetPID_FullMethodName            = "/proto.NexusBackend/GetPID"
)

// NexusBackendClient is the client API for NexusBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusBackendClient interface {
	AddServer(ctx context.Context, in *AddServerReq, opts ...grpc.CallOption) (*ServerMetadata, error)
	RemoveServer(ctx context.Context, in *RemoveServerReq, opts ...grpc.CallOption) (*RemoveServerResp, error)
	DrainServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DrainServerResp, error)
	GetServerMetadata(ctx context.Context, in *GetServerMetadataReq, opts ...grpc.CallOption) (*GetServerMetadataResp, error)
	ListServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServersResp, error)
	GetPID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPIDResp, error)
}

type nexusBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusBackendClient(cc grpc.ClientConnInterface) NexusBackendClient {
	return &nexusBackendClient{cc}
}

func (c *nexusBackendClient) AddServer(ctx context.Context, in *AddServerReq, opts ...grpc.CallOption) (*ServerMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerMetadata)
	err := c.cc.Invoke(ctx, NexusBackend_AddServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusBackendClient) RemoveServer(ctx context.Context, in *RemoveServerReq, opts ...grpc.CallOption) (*RemoveServerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveServerResp)
	err := c.cc.Invoke(ctx, NexusBackend_RemoveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusBackendClient) DrainServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DrainServerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DrainServerResp)
	err := c.cc.Invoke(ctx, NexusBackend_DrainServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusBackendClient) GetServerMetadata(ctx context.Context, in *GetServerMetadataReq, opts ...grpc.CallOption) (*GetServerMetadataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerMetadataResp)
	err := c.cc.Invoke(ctx, NexusBackend_GetServerMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusBackendClient) ListServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResp)
	err := c.cc.Invoke(ctx, NexusBackend_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusBackendClient) GetPID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPIDResp)
	err := c.cc.Invoke(ctx, NexusBackend_GetPID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusBackendServer is the server API for NexusBackend service.
// All implementations must embed UnimplementedNexusBackendServer
// for forward compatibility.
type NexusBackendServer interface {
	AddServer(context.Context, *AddServerReq) (*ServerMetadata, error)
	RemoveServer(context.Context, *RemoveServerReq) (*RemoveServerResp, error)
	DrainServer(context.Context, *Empty) (*DrainServerResp, error)
	GetServerMetadata(context.Context, *GetServerMetadataReq) (*GetServerMetadataResp, error)
	ListServers(context.Context, *Empty) (*ListServersResp, error)
	GetPID(context.Context, *Empty) (*GetPIDResp, error)
	mustEmbedUnimplementedNexusBackendServer()
}

// UnimplementedNexusBackendServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNexusBackendServer struct{}

func (UnimplementedNexusBackendServer) AddServer(context.Context, *AddServerReq) (*ServerMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedNexusBackendServer) RemoveServer(context.Context, *RemoveServerReq) (*RemoveServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServer not implemented")
}
func (UnimplementedNexusBackendServer) DrainServer(context.Context, *Empty) (*DrainServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrainServer not implemented")
}
func (UnimplementedNexusBackendServer) GetServerMetadata(context.Context, *GetServerMetadataReq) (*GetServerMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMetadata not implemented")
}
func (UnimplementedNexusBackendServer) ListServers(context.Context, *Empty) (*ListServersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedNexusBackendServer) GetPID(context.Context, *Empty) (*GetPIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPID not implemented")
}
func (UnimplementedNexusBackendServer) mustEmbedUnimplementedNexusBackendServer() {}
func (UnimplementedNexusBackendServer) testEmbeddedByValue()                      {}

// UnsafeNexusBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusBackendServer will
// result in compilation errors.
type UnsafeNexusBackendServer interface {
	mustEmbedUnimplementedNexusBackendServer()
}

func RegisterNexusBackendServer(s grpc.ServiceRegistrar, srv NexusBackendServer) {
	// If the following call pancis, it indicates UnimplementedNexusBackendServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NexusBackend_ServiceDesc, srv)
}

func _NexusBackend_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusBackendServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusBackend_AddServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusBackendServer).AddServer(ctx, req.(*AddServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusBackend_RemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusBackendServer).RemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusBackend_RemoveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusBackendServer).RemoveServer(ctx, req.(*RemoveServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusBackend_DrainServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusBackendServer).DrainServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusBackend_DrainServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusBackendServer).DrainServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusBackend_GetServerMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusBackendServer).GetServerMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusBackend_GetServerMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusBackendServer).GetServerMetadata(ctx, req.(*GetServerMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusBackend_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusBackendServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusBackend_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusBackendServer).ListServers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusBackend_GetPID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusBackendServer).GetPID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusBackend_GetPID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusBackendServer).GetPID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NexusBackend_ServiceDesc is the grpc.ServiceDesc for NexusBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NexusBackend",
	HandlerType: (*NexusBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServer",
			Handler:    _NexusBackend_AddServer_Handler,
		},
		{
			MethodName: "RemoveServer",
			Handler:    _NexusBackend_RemoveServer_Handler,
		},
		{
			MethodName: "DrainServer",
			Handler:    _NexusBackend_DrainServer_Handler,
		},
		{
			MethodName: "GetServerMetadata",
			Handler:    _NexusBackend_GetServerMetadata_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _NexusBackend_ListServers_Handler,
		},
		{
			MethodName: "GetPID",
			Handler:    _NexusBackend_GetPID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexus_backend.proto",
}
