// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: vm_orchestrator.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Orchestrator_StartVM_FullMethodName        = "/proto.Orchestrator/StartVM"
	Orchestrator_SnapshotVM_FullMethodName     = "/proto.Orchestrator/SnapshotVM"
	Orchestrator_RestoreVM_FullMethodName      = "/proto.Orchestrator/RestoreVM"
	Orchestrator_StopVM_FullMethodName         = "/proto.Orchestrator/StopVM"
	Orchestrator_Cleanup_FullMethodName        = "/proto.Orchestrator/Cleanup"
	Orchestrator_GetVMIP_FullMethodName        = "/proto.Orchestrator/GetVMIP"
	Orchestrator_ListVMs_FullMethodName        = "/proto.Orchestrator/ListVMs"
	Orchestrator_ListSnapshots_FullMethodName  = "/proto.Orchestrator/ListSnapshots"
	Orchestrator_GetVMMetadata_FullMethodName  = "/proto.Orchestrator/GetVMMetadata"
	Orchestrator_SendSSHCommand_FullMethodName = "/proto.Orchestrator/SendSSHCommand"
	Orchestrator_GetPID_FullMethodName         = "/proto.Orchestrator/GetPID"
)

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	StartVM(ctx context.Context, in *StartVMReq, opts ...grpc.CallOption) (*StartVMResp, error)
	SnapshotVM(ctx context.Context, in *SnapshotVMReq, opts ...grpc.CallOption) (*SnapshotVMResp, error)
	RestoreVM(ctx context.Context, in *RestoreVMReq, opts ...grpc.CallOption) (*RestoreVMResp, error)
	StopVM(ctx context.Context, in *StopVMReq, opts ...grpc.CallOption) (*Status, error)
	Cleanup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
	GetVMIP(ctx context.Context, in *GetVMIPReq, opts ...grpc.CallOption) (*GetVMIPResp, error)
	ListVMs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VMList, error)
	ListSnapshots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotList, error)
	GetVMMetadata(ctx context.Context, in *GetVMMetadataReq, opts ...grpc.CallOption) (*GetVMMetadataResp, error)
	SendSSHCommand(ctx context.Context, in *SendSSHCommandReq, opts ...grpc.CallOption) (*SendSSHCommandResp, error)
	GetPID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPIDResp, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) StartVM(ctx context.Context, in *StartVMReq, opts ...grpc.CallOption) (*StartVMResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVMResp)
	err := c.cc.Invoke(ctx, Orchestrator_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) SnapshotVM(ctx context.Context, in *SnapshotVMReq, opts ...grpc.CallOption) (*SnapshotVMResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotVMResp)
	err := c.cc.Invoke(ctx, Orchestrator_SnapshotVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RestoreVM(ctx context.Context, in *RestoreVMReq, opts ...grpc.CallOption) (*RestoreVMResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreVMResp)
	err := c.cc.Invoke(ctx, Orchestrator_RestoreVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) StopVM(ctx context.Context, in *StopVMReq, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Orchestrator_StopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) Cleanup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Orchestrator_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetVMIP(ctx context.Context, in *GetVMIPReq, opts ...grpc.CallOption) (*GetVMIPResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVMIPResp)
	err := c.cc.Invoke(ctx, Orchestrator_GetVMIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListVMs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VMList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMList)
	err := c.cc.Invoke(ctx, Orchestrator_ListVMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListSnapshots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotList)
	err := c.cc.Invoke(ctx, Orchestrator_ListSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetVMMetadata(ctx context.Context, in *GetVMMetadataReq, opts ...grpc.CallOption) (*GetVMMetadataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVMMetadataResp)
	err := c.cc.Invoke(ctx, Orchestrator_GetVMMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) SendSSHCommand(ctx context.Context, in *SendSSHCommandReq, opts ...grpc.CallOption) (*SendSSHCommandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSSHCommandResp)
	err := c.cc.Invoke(ctx, Orchestrator_SendSSHCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetPID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPIDResp)
	err := c.cc.Invoke(ctx, Orchestrator_GetPID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility.
type OrchestratorServer interface {
	StartVM(context.Context, *StartVMReq) (*StartVMResp, error)
	SnapshotVM(context.Context, *SnapshotVMReq) (*SnapshotVMResp, error)
	RestoreVM(context.Context, *RestoreVMReq) (*RestoreVMResp, error)
	StopVM(context.Context, *StopVMReq) (*Status, error)
	Cleanup(context.Context, *Empty) (*Status, error)
	GetVMIP(context.Context, *GetVMIPReq) (*GetVMIPResp, error)
	ListVMs(context.Context, *Empty) (*VMList, error)
	ListSnapshots(context.Context, *Empty) (*SnapshotList, error)
	GetVMMetadata(context.Context, *GetVMMetadataReq) (*GetVMMetadataResp, error)
	SendSSHCommand(context.Context, *SendSSHCommandReq) (*SendSSHCommandResp, error)
	GetPID(context.Context, *Empty) (*GetPIDResp, error)
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServer struct{}

func (UnimplementedOrchestratorServer) StartVM(context.Context, *StartVMReq) (*StartVMResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedOrchestratorServer) SnapshotVM(context.Context, *SnapshotVMReq) (*SnapshotVMResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotVM not implemented")
}
func (UnimplementedOrchestratorServer) RestoreVM(context.Context, *RestoreVMReq) (*RestoreVMResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreVM not implemented")
}
func (UnimplementedOrchestratorServer) StopVM(context.Context, *StopVMReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedOrchestratorServer) Cleanup(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedOrchestratorServer) GetVMIP(context.Context, *GetVMIPReq) (*GetVMIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMIP not implemented")
}
func (UnimplementedOrchestratorServer) ListVMs(context.Context, *Empty) (*VMList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (UnimplementedOrchestratorServer) ListSnapshots(context.Context, *Empty) (*SnapshotList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedOrchestratorServer) GetVMMetadata(context.Context, *GetVMMetadataReq) (*GetVMMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMMetadata not implemented")
}
func (UnimplementedOrchestratorServer) SendSSHCommand(context.Context, *SendSSHCommandReq) (*SendSSHCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSSHCommand not implemented")
}
func (UnimplementedOrchestratorServer) GetPID(context.Context, *Empty) (*GetPIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPID not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}
func (UnimplementedOrchestratorServer) testEmbeddedByValue()                      {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).StartVM(ctx, req.(*StartVMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_SnapshotVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotVMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).SnapshotVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_SnapshotVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).SnapshotVM(ctx, req.(*SnapshotVMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RestoreVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreVMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RestoreVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_RestoreVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RestoreVM(ctx, req.(*RestoreVMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).StopVM(ctx, req.(*StopVMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).Cleanup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetVMIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetVMIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetVMIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetVMIP(ctx, req.(*GetVMIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_ListVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListVMs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListSnapshots(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetVMMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetVMMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetVMMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetVMMetadata(ctx, req.(*GetVMMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_SendSSHCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSSHCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).SendSSHCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_SendSSHCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).SendSSHCommand(ctx, req.(*SendSSHCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetPID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetPID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetPID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetPID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVM",
			Handler:    _Orchestrator_StartVM_Handler,
		},
		{
			MethodName: "SnapshotVM",
			Handler:    _Orchestrator_SnapshotVM_Handler,
		},
		{
			MethodName: "RestoreVM",
			Handler:    _Orchestrator_RestoreVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _Orchestrator_StopVM_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _Orchestrator_Cleanup_Handler,
		},
		{
			MethodName: "GetVMIP",
			Handler:    _Orchestrator_GetVMIP_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _Orchestrator_ListVMs_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _Orchestrator_ListSnapshots_Handler,
		},
		{
			MethodName: "GetVMMetadata",
			Handler:    _Orchestrator_GetVMMetadata_Handler,
		},
		{
			MethodName: "SendSSHCommand",
			Handler:    _Orchestrator_SendSSHCommand_Handler,
		},
		{
			MethodName: "GetPID",
			Handler:    _Orchestrator_GetPID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm_orchestrator.proto",
}
